name: test-action

on:
  workflow_dispatch:
    inputs:
      src_repository:
        description: Source Repository - {owner}/{repo_name}
        required: true
      src_workflow_name:
        description: Source Workflow Name
        required: true
      src_sha:
        description: Source Repository SHA - GITHUB_SHA
        required: true

jobs:
  prepare:
    # Use the action
    runs-on: ubuntu-20.04
    if: ${{ always() }}
    name: Test ${{ github.event.inputs.src_repository }}
    strategy:
      matrix:
        include:
          - CONFIGMAP_KEY: ""
          - CONFIGMAP_KEY: default
          - CONFIGMAP_KEY: development
          - CONFIGMAP_KEY: production
          - CONFIGMAP_KEY: staging
    steps:
      - uses: actions/checkout@v2
      - name: Set Configmap
        env:
          CONFIGMAP_FILE_PATH: configmap.json
        id: set-configmap
        run: |
          jq . ${CONFIGMAP_FILE_PATH}
          jq -c . ${CONFIGMAP_FILE_PATH}
          echo "::set-output name=configmap::$(jq -c . ${CONFIGMAP_FILE_PATH})"
      - name: Export Configmap
        continue-on-error: true # Allow failure, a status update will be sent to source repo
        with:
          configmap_map: ${{ steps.set-configmap.outputs.configmap }}
          configmap_key: ${{ matrix.configmap.CONFIGMAP_KEY }}
        id: export-configmap
        uses: unfor19/configmap-action@development
    ### Required outputs - feel free to add your more outputs
    ### -----------------------------------------------------
    outputs:
      CONFIGMAP: ${{ steps.export-configmap.outputs.CONFIGMAP_MAP }}
      CONFIGMAP_SELECTED_KEY: ${{ steps.export-configmap.outputs.CONFIGMAP_SELECTED_KEY }}
    ### -----------------------------------------------------

  build:
    # Test needs.prepare and matrix
    runs-on: ubuntu-20.04
    if: ${{ always() }}
    name: Build ${{ matrix.configmap.CONFIGMAP_SELECTED_KEY }}
    ### Add the following block to each job
    ### -----------------------------------------------------
    needs:
      - prepare
    strategy:
      matrix:
        configmap: ${{ fromJSON(needs.prepare.outputs.CONFIGMAP) }}
    ### -----------------------------------------------------
    steps:
      - uses: actions/checkout@v2
      # Inject relevant variables per step
      - name: Get env vars
        env:
          NODE_ENV: ${{ matrix.configmap.NODE_ENV }}
          NODE_VERSION: ${{ matrix.configmap.NODE_VERSION }}
        run: |
          echo "$NODE_ENV"
          echo "$NODE_VERSION"
    outputs:
      target_job_status: ${{ job.status }}

  deploy:
    # Test secrets
    runs-on: ubuntu-20.04
    name: Deploy to ${{ needs.prepare.outputs.CONFIGMAP_SELECTED_KEY }}
    if: ${{ always() }}
    ### Add the following condition to skip deployments for non-environment branches
    # if: |
    #   always() &&
    #   needs.prepare.outputs.CONFIGMAP_SELECTED_KEY != '' &&
    #   github.event_name == 'push'
    ### Add the following block to each job
    ### -----------------------------------------------------
    needs:
      - prepare
      - build
    strategy:
      matrix:
        configmap: ${{ fromJSON(needs.prepare.outputs.CONFIGMAP) }}
    env:
      DEPLOYMENT_ENVIRONMENT: ${{ needs.prepare.outputs.CONFIGMAP_SELECTED_KEY }}
    ### -----------------------------------------------------
    steps:
      - uses: actions/checkout@v2
      # Inject relevant variables per step
      - name: Get env vars
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[matrix.configmap.AWS_ACCESS_KEY_ID_NAME] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[matrix.configmap.AWS_SECRET_ACCESS_KEY_NAME] }}
        run: |
          echo "Deploying to $DEPLOYMENT_ENVIRONMENT"
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
    outputs:
      target_job_status: ${{ job.status }}

  update-status-check:
    name: Update Status Check In Source Repository
    runs-on: ubuntu-20.04
    needs:
      - deploy
    if: ${{ always() }}
    steps:
      - name: Status Update Action Repo
        uses: unfor19/hero-action@master
        with:
          action: "status-update"
          gh_token: ${{ secrets.GH_TOKEN }} # scope: repo + workflow
          src_repository: ${{ github.event.inputs.src_repository }}
          src_workflow_name: ${{ github.event.inputs.src_workflow_name }}
          src_sha: ${{ github.event.inputs.src_sha }}
          target_repository: ${{ github.repository }}
          target_job_status: ${{ needs.deploy.outputs.target_job_status }}
          target_run_id: ${{ github.run_id }}
